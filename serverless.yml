# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: food-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.8
  region: us-west-1
  apiKeys:
    - myFoodKey
# you can overwrite defaults here
#  stage: dev
  

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:Query"
      Resource: 
        Fn::GetAtt:
          - foodDBTable
          - Arn


# you can define service wide environment variables here
  environment:
    STAGE: "${opt:stage}"

# you can add packaging information here
package:
  exclude:
    - ./**
  include:
   - food_api/**

functions:
  hello:
    handler: food_api/handler.hello
  categories:
    handler: food_api/handler.get_categories
    events:
      - http:
          path: categories
          method: get
          private: true
  get_food_category:
    handler: food_api/handler.get_food_category
    events:
      - http:
          path: category/{category}
          method: get
          private: true
          request:
            parameters:
              paths:
                category: true
  get_single_food:
    handler: food_api/handler.get_single_food
    events:
      - http:
          path: food/{category}/{food_id}
          method: get
          private: true
          request:
            parameters:
              paths:
                category: true
                food_id: true
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2
plugins:
  - serverless-certificate-creator
  - serverless-domain-manager

custom:
  customCertificate:
    certificateName: ${file(${opt:stage}.yml):domain_name}
    hostedZoneNames: 'anikamlodzianowski.com.'
    region: us-west-1
  customDomain:
    domainName: ${file(${opt:stage}.yml):domain_name}
    certificateName: ${file(${opt:stage}.yml):domain_name}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: regional
# you can add CloudFormation resource templates here
resources:
  Resources:
    foodDBTable: 
      Type: AWS::DynamoDB::Table
      Properties: 
        AttributeDefinitions: 
          - 
            AttributeName: "PK"
            AttributeType: "S"
          - 
            AttributeName: "SK"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "PK"
            KeyType: "HASH"
          - 
            AttributeName: "SK"
            KeyType: "RANGE"
        ProvisionedThroughput: 
          ReadCapacityUnits: "3"
          WriteCapacityUnits: "1"
        TableName: "${opt:stage}-food"